package algorithms;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;


public class Kruskal {

	////////////////////
	public Tree2D kruskal(ArrayList<Point> points) {
		HashMap<Point, Integer> myHash = getHash(points);
		ArrayList<Arete> aretes = getAllAretes(points);
		aretes.sort(new myComparator());

		ArrayList<Arete> solution = new ArrayList<Arete>();
		Set<Point> visite = new HashSet<Point>();

		for(Arete cur : aretes) {
			Point p1 = cur.getPointA();
			Point p2 = cur.getPointB();
			int x = myHash.get(p1);
			int y = myHash.get(p2);

			if(x == y)
				continue;

			visite.add(p1);
			visite.add(p2);
			reetiqueter(x, y, myHash);
			solution.add(cur);
		}

		return AreteToTree(solution);
	}


	private void reetiqueter(int x, int y, HashMap<Point, Integer> myHash) {
		for(Point p : myHash.keySet()) {
			if(x == myHash.get(p))
				myHash.replace(p, y);
		}
	}

	private HashMap<Point, Integer> getHash(ArrayList<Point> points) {
		HashMap<Point, Integer> res = new HashMap<Point, Integer>();
		int cpt = 0;
		for(Point tmp : points) 
			res.put(tmp, cpt++);
		return res;
	}



	private Tree2D AreteToTree(ArrayList<Arete> solution) {
		return AreteToTreeRec(solution.get(0).getPointA(), solution);
	}

	@SuppressWarnings("unchecked")
	private Tree2D AreteToTreeRec(Point myPoint, ArrayList<Arete> solution) {
		ArrayList<Arete> solution2; 
		Point cur = myPoint;
		ArrayList<Point> fils = getAllExtre(cur, solution);
		Tree2D cur2D = new Tree2D(cur, new ArrayList<Tree2D>());

		if(fils.isEmpty())
			return cur2D;

		for(Point tmp : fils) {
			solution2 = (ArrayList<Arete>) solution.clone();
			Arete branche = getArete(myPoint, tmp, solution2);
			solution2.remove(branche);

			Tree2D fils2D = AreteToTreeRec(tmp, solution2);
			cur2D.getSubTrees().add(fils2D);
		}
		return cur2D;
	}

	private Arete getArete(Point point1, Point point2, ArrayList<Arete> solution2) {
		for(Arete tmp : solution2) {
			if(tmp.getPointA().equals(point1) && tmp.getPointB().equals(point2))
				return tmp;
			if(tmp.getPointA().equals(point2) && tmp.getPointB().equals(point1))
				return tmp;
		}
		System.out.println("DEBUFFFFFFFFGGGGGGGGGGGG !!!");
		return null;
	}



	private ArrayList<Point> getAllExtre(Point cur, ArrayList<Arete> solution) {
		ArrayList<Point> res = new ArrayList<Point>();

		for(Arete a : solution) {
			if(a.getPointA().equals(cur)) 
				res.add(a.getPointB());
			else if(a.getPointB().equals(cur))
				res.add(a.getPointA());

		}
		return res;
	}








	public ArrayList<Arete> getAllAretes(ArrayList<Point> points) {
		ArrayList<Arete> aretes = new ArrayList<Arete>();
		for(int i=0 ; i<points.size() ; i++) {
			for(int j = i+1 ; j<points.size() ; j++) {
				Point p1 = points.get(i);
				Point p2 = points.get(j);
				//if(p1.equals(p2))
				//continue;
				aretes.add(new Arete(p1, p2));
			}
		}
		return aretes;
	}

	public class myComparator implements Comparator<Arete>{

		@Override
		public int compare(Arete o1, Arete o2) {
			if(o1.getPoids() == o2.getPoids())
				return 0;
			else if(o1.getPoids() > o2.getPoids())
				return 1;
			else 
				return -1;

		}

	}


}
