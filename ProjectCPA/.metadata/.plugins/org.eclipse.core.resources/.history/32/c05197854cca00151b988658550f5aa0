package algorithms;

import java.awt.Point;
import java.util.ArrayList;

import supportGUI.Circle;
import supportGUI.Line;

public class DefaultTeam {

	// calculDiametre: ArrayList<Point> --> Line
	//   renvoie une pair de points de la liste, de distance maximum.
	public Line calculDiametre(ArrayList<Point> points) {
		if (points.size()<3) {
			return null;
		}

		Point p=points.get(0);
		Point q=points.get(1);

		/*******************
		 * PARTIE A ECRIRE *
		 *******************/
		return new Line(p,q);
	}

	// calculDiametreOptimise: ArrayList<Point> --> Line
	//   renvoie une pair de points de la liste, de distance maximum.
	public Line calculDiametreOptimise(ArrayList<Point> points) {
		if (points.size()<3) {
			return null;
		}

		Point p=points.get(1);
		Point q=points.get(2);

		/*******************
		 * PARTIE A ECRIRE *
		 *******************/
		return new Line(p,q);
	}

	// calculCercleMin: ArrayList<Point> --> Circle
	//   renvoie un cercle couvrant tout point de la liste, de rayon minimum.
	public Circle calculCercleMin(ArrayList<Point> points) {
		if (points.isEmpty()) {
			return null;
		}

		Point center=points.get(0);
		int radius=100;

		/*******************
		 * PARTIE A ECRIRE *
		 *******************/
		return new Circle(center,radius);
	}


	//Return 1 si du bon cote, -1 du mauvais et 0 sur la ligne
	public int pdtVecto(Point c, Point p, Point q){  
		Point pq = new Point(q.x-p.x, q.y-p.y);   //u
		Point pc = new Point(c.x-p.x, c.y-p.y);   //v
		int res = pq.x*pc.y - pq.y*pc.x;
		if(res > 0)
			return 1;
		if(res < 0)
			return -1;
		return 0;

	}


	public boolean auMilieu(Point t, Point p, Point q){
		if(Math.sqrt(Math.pow(p.x-q.x, 2) + Math.pow(p.y-q.y, 2)) >= Math.sqrt(Math.pow(p.x-t.x, 2) + Math.pow(p.y-t.y, 2)))
			return true;
		return false;
	}


	public ArrayList<Point> filtrerPixel(ArrayList<Point> points){
		for(Point a : points){
			for(Point b : points){
				if(b.equals(a) || (a.x != b.x))
					continue;
				for(Point c : points){
					if(c.equals(a) || c.equals(b) || (c.x != b.x))
						continue;
					int min = Math.min(Math.min(a.y, b.y), c.y);
					int max = Math.max(Math.max(a.y, b.y), c.y);
					if(a.y != min && a.y != max){
						points.remove(a);
						return points;
					}
					if(b.y != min && b.y != max){
						points.remove(b);
						return points;
					}
					points.remove(c);
					return points;
				}
			} 
		}
		return points;
	}



	// enveloppeConvexe: ArrayList<Point> --> ArrayList<Point>
	//   renvoie l'enveloppe convexe de la liste.
	public ArrayList<Point> enveloppeConvexeNaif(ArrayList<Point> points){
		if (points.size()<3) {
			return null;
		}

		points = filtrerPixel(points);

		ArrayList<Point> enveloppe = new ArrayList<Point>();
		ArrayList<Point> milieu = new ArrayList<Point>();

		boolean estCote = true, gauche = false, droite = false;


		/*******************
		 * PARTIE A ECRIRE *
		 *******************/

		for(Point p : points){
			for(Point q : points){
				if(p.equals(q))
					continue;
				for(Point c : points){
					if(c.equals(p) || c.equals(q))
						continue;
					if(pdtVecto(c, p, q) > 0)
						droite = true;
					else if(pdtVecto(c, p, q) < 0)
						gauche = true;
					else if(pdtVecto(c, p, q) == 0)
						milieu.add(c);
					if(gauche && droite){
						estCote = false;
						break;
					}
				}
				if(estCote){
					for(Point t : milieu){
						if(! auMilieu(t, p, q)){
							estCote = false;
							break;
						}
					}
				}

				if(estCote){
					enveloppe.add(p);
					enveloppe.add(q);
				}
				gauche = false;
				droite = false;
				estCote = true;
				milieu.removeAll(milieu);
			}
		}

		return enveloppe;

	}



	public ArrayList<Point> enveloppeConvexe(ArrayList<Point> points){
		if (points.size()<3) {
			return null;
		}

		ArrayList<Point> enveloppe = new ArrayList<Point>();

		boolean estCote = true, gauche = false, droite = false;
		Point p = points.get(0);
		Point q = points.get(0);
		double min = points.get(0).x;


		/*******************
		 * PARTIE A ECRIRE *
		 *******************/

		for(Point a : points){
			if(a.x < min){
				min = a.x;
				p = a;
			}
		}

		for(Point b : points){
			if(p.equals(b))
				continue;
			estCote = true;
			for(Point c : points){
				if(c.equals(p) || c.equals(b))
					continue;
				if(pdtVecto(c, p, b) > 0)
					droite = true;
				else if(pdtVecto(c, p, b) < 0)
					gauche = true;
				if(gauche && droite){
					estCote = false;
					break;
				}
			}
			if(estCote){
				q = b;
				break;
			}
			droite = false;
			gauche = false;
		}

		enveloppe.add(p);
		enveloppe.add(q);
		Point r = q;

		Point pq = new Point(q.x-p.x, q.y-p.y);   //PQ
		Point f = points.get(0);
		for(Point a : points){
			if(a.equals(p) || a.equals(q))
				continue;
			f = a;
		}
		Point qf = new Point(f.x-q.x, f.y-q.y);   //QF
		min = (pq.x * qf.x + pq.y * qf.y) / (Math.sqrt(Math.pow(p.x-q.x, 2) + Math.pow(p.y-q.y, 2)) * Math.sqrt(Math.pow(f.x-q.x, 2) + Math.pow(f.y-q.y, 2)));
		Point p0 = p;
		System.out.println("Un : " + min);
		
		int count=0;
		
		while(! r.equals(p0) && count < 500000){
			count++;
			for(Point c : points){
				if(p.equals(c) || q.equals(c))
					continue;
				Point qc = new Point(c.x-q.x, c.y-q.y);   //QR
				double pdtScal = (pq.x * qc.x + pq.y * qc.y) / (Math.sqrt(Math.pow(p.x-q.x, 2) + Math.pow(p.y-q.y, 2)) * Math.sqrt(Math.pow(c.x-q.x, 2) + Math.pow(c.y-q.y, 2)));
				System.out.println("Un : " + min + " et "+pdtScal);
				if(pdtScal > min){
					min = pdtScal;
					r = c;
				}
			}
			min = Double.MIN_VALUE;
			enveloppe.add(r);
			p = q;
			q = r;
			pq = new Point(q.x-p.x, q.y-p.y);
		}

		return enveloppe;

	}
	
	
	
	
	public static double calcRotationAngleInDegrees(Point centerPt, Point targetPt)
	{
	    // calculate the angle theta from the deltaY and deltaX values
	    // (atan2 returns radians values from [-PI,PI])
	    // 0 currently points EAST.  
	    // NOTE: By preserving Y and X param order to atan2,  we are expecting 
	    // a CLOCKWISE angle direction.  
	    double theta = Math.atan2(targetPt.y - centerPt.y, targetPt.x - centerPt.x);

	    // rotate the theta angle clockwise by 90 degrees 
	    // (this makes 0 point NORTH)
	    // NOTE: adding to an angle rotates it clockwise.  
	    // subtracting would rotate it counter-clockwise
	    theta += Math.PI/2.0;

	    // convert from radians to degrees
	    // this will give you an angle from [0->270],[-180,0]
	    double angle = Math.toDegrees(theta);

	    // convert to positive range [0-360)
	    // since we want to prevent negative angles, adjust them now.
	    // we can assume that atan2 will not return a negative value
	    // greater than one partial rotation
	    if (angle < 0) {
	        angle += 360;
	    }

	    return angle;
	}


}
